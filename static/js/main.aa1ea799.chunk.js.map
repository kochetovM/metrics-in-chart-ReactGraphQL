{"version":3,"sources":["Features/Weather/reducer.ts","Features/Weather/saga.ts","store/sagas.js","Features/ChartsMenu/reducer.ts","Features/HistoryMetrics/reducer.ts","Features/CurrentMetrics/reducer.ts","store/reducers.ts","store/index.ts","Features/Weather/Weather.tsx","components/Chip.tsx","components/Header.tsx","components/Wrapper.tsx","components/Select.tsx","Features/ChartsMenu/AvailableCharts.tsx","components/HistoryChart.tsx","Features/HistoryMetrics/HistoryMetrics.tsx","components/CurrentMetricsContainer.tsx","Features/CurrentMetrics/CurrentMetrics.tsx","App.tsx","index.js"],"names":["slice","createSlice","name","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","reducers","weatherDataRecevied","state","action","payload","weatherApiErrorReceived","reducer","actions","apiErrorReceived","watchApiError","call","toast","error","takeEvery","WeatherActions","type","root","spawn","weatherSaga","metrics","selectedMetrics","currentSelectedMetric","deletedMetric","metricsDataReceived","metricsApiErrorReceived","metricsSelected","currentSelected","filter","curr","includes","metricDeleted","m","historyMetricReceived","key","measurements","historyMetricApiError","historyMetricNotActive","newMeasurementReceived","metric","value","currentMeasurementApiError","Object","keys","item","weather","weatherReducer","availableCharts","chartsReducer","currentMetrics","currentMetricsReducer","historyMetrics","historyMetricsReducer","combineReducers","withStyles","theme","background","palette","secondary","main","label","color","primary","Chip","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","Weather","wrapper","height","Wrapper","children","createStyles","formControlContainer","width","justifySelf","formControl","chips","display","flexWrap","chip","margin","zIndex","options","selectedOptions","handleChange","handleDelete","freeOptions","opt","FormControl","Select","id","multiple","onChange","renderValue","selected","map","onDelete","onMouseDown","event","stopPropagation","length","align","gutterBottom","MenuItem","getAvaiableCharts","AvaiableCharts","dispatch","useDispatch","useSelector","useQuery","query","result","fetching","data","useEffect","message","getMetrics","LinearProgress","target","e","colors","HistoryChart","yAxes","datalabels","entries","i","push","borderWidth","fill","at","t","y","yAxisID","lineTension","borderColor","pointHoverRadius","pointHoverBorderWidth","pointRadius","datasets","scales","xAxes","distribution","calc30minago","Date","now","getHistoryMetrics","HistoryMetrics","variables","metricName","afterTime","getMultipleMeasurements","toDispatch","card","maxWidth","padding","container","CurrentMetricCard","Card","Grid","spacing","direction","justify","alignItems","xs","handleSub","messages","response","newMeasurement","getCurrentMetrics","CurrentMetrics","useSubscription","res","typedData","CurrentMetricsContainer","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createMuiTheme","default","subscriptionClient","SubscriptionClient","reconnect","client","createClient","url","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","workingArea","flexDirection","justifyContent","marginBottom","App","CssBaseline","Header","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa1ea799.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"redux-starter-kit\";\n\nexport type WeatherForLocation = {\n  description: string;\n  locationName: string;\n  temperatureinCelsius: number;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  temperatureinCelsius: 0,\n  temperatureinFahrenheit: 0,\n  description: \"\",\n  locationName: \"\"\n};\n\nconst toF = (c: number) => (c * 9) / 5 + 32;\n\nconst slice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    weatherDataRecevied: (state, action: PayloadAction<WeatherForLocation>) => {\n      const {\n        description,\n        locationName,\n        temperatureinCelsius\n      } = action.payload;\n      state.temperatureinCelsius = temperatureinCelsius;\n      state.temperatureinFahrenheit = toF(temperatureinCelsius);\n      state.description = description;\n      state.locationName = locationName;\n    },\n    weatherApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) =>\n      state\n  }\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { takeEvery, call } from \"redux-saga/effects\";\nimport { toast } from \"react-toastify\";\nimport { actions as WeatherActions, ApiErrorAction } from \"./reducer\";\nimport { PayloadAction } from \"redux-starter-kit\";\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(\n    WeatherActions.weatherApiErrorReceived.type,\n    apiErrorReceived\n  );\n}\n","import { spawn } from \"redux-saga/effects\";\nimport weatherSaga from \"../Features/Weather/saga\";\n\nexport default function* root() {\n  yield spawn(weatherSaga);\n}\n","import { ApiErrorAction } from \"./../../ApiErrorAction\";\nimport { createSlice, PayloadAction } from \"redux-starter-kit\";\n\nexport type KnownMetrics = {\n  metrics: string[];\n};\n\nconst initialState = {\n  metrics: [] as string[],\n  selectedMetrics: [] as string[],\n  currentSelectedMetric: \"\",\n  deletedMetric: \"\"\n};\n\nconst slice = createSlice({\n  name: \"metrics\",\n  initialState,\n  reducers: {\n    metricsDataReceived: (state, action: PayloadAction<string[]>) => {\n      state.metrics = action.payload;\n    },\n    metricsApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) =>\n      state,\n    metricsSelected: (state, action: PayloadAction<string[]>) => {\n      const currentSelected = action.payload.filter(\n        curr => !state.selectedMetrics.includes(curr)\n      )[0];\n      state.currentSelectedMetric = currentSelected as string;\n      state.selectedMetrics = action.payload;\n      state.deletedMetric = \"\";\n    },\n    metricDeleted: (state, action: PayloadAction<string>) => {\n      state.selectedMetrics = state.selectedMetrics.filter(\n        m => m !== action.payload\n      );\n      state.deletedMetric = action.payload;\n      state.currentSelectedMetric = \"\";\n    }\n  }\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { NewMeasurement } from \"./../CurrentMetrics/reducer\";\nimport { createSlice, PayloadAction } from \"redux-starter-kit\";\nimport { ApiErrorAction } from \"../../ApiErrorAction\";\n\nconst initialState: {\n  [key: string]: NewMeasurement[];\n} = {};\n\ntype Action = {\n  key: string;\n  measurements: NewMeasurement[];\n};\n\nconst slice = createSlice({\n  name: \"historyMetrics\",\n  initialState,\n  reducers: {\n    historyMetricReceived: (state, action: PayloadAction<Action>) => {\n      state[action.payload.key] = action.payload.measurements;\n    },\n    historyMetricApiError: (state, action: PayloadAction<ApiErrorAction>) =>\n      state,\n    historyMetricNotActive: (state, action: PayloadAction<string>) => {\n      delete state[action.payload];\n    }\n  }\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { createSlice, PayloadAction } from \"redux-starter-kit\";\nimport { ApiErrorAction } from \"../../ApiErrorAction\";\n\nexport type NewMeasurement = {\n  at: number;\n  metric: string;\n  unit: string;\n  value: number;\n};\n\nconst initialState: { [key: string]: number } = {};\n\nconst slice = createSlice({\n  name: \"currentMeasurement\",\n  initialState,\n  reducers: {\n    newMeasurementReceived: (state, action: PayloadAction<NewMeasurement>) => {\n      state[action.payload.metric as string] = action.payload.value;\n    },\n    currentMeasurementApiError: (\n      state,\n      action: PayloadAction<ApiErrorAction>\n    ) => state,\n    metricDeleted: (state, action: PayloadAction<string[]>) => {\n      const deletedKey = Object.keys(state).filter(\n        item => !action.payload.includes(item)\n      );\n      delete state[(deletedKey as unknown) as string];\n    }\n  }\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { reducer as weatherReducer } from \"../Features/Weather/reducer\";\nimport { reducer as chartsReducer } from \"../Features/ChartsMenu/reducer\";\nimport { reducer as historyMetricsReducer } from \"../Features/HistoryMetrics/reducer\";\nimport { reducer as currentMetricsReducer } from \"../Features/CurrentMetrics/reducer\";\n\nexport default {\n  weather: weatherReducer,\n  availableCharts: chartsReducer,\n  currentMetrics: currentMetricsReducer,\n  historyMetrics: historyMetricsReducer\n};\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { combineReducers } from \"redux-starter-kit\";\nimport sagas from \"./sagas\";\nimport reducers from \"./reducers\";\n\nconst reducer = combineReducers(reducers);\nexport type IState = ReturnType<typeof reducer>;\n\nexport default () => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(reducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions } from \"./reducer\";\nimport { useQuery } from \"urql\";\nimport { useGeolocation } from \"react-use\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Chip from \"../../components/Chip\";\nimport { IState } from \"../../store\";\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName\n  };\n};\n\nexport default () => {\n  return (\n    /*<Provider value={client}>*/\n    <div>{/*<Weather />*/}</div>\n    /* </Provider>*/\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(\n    getWeather\n  );\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong\n    }\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n  return (\n    <Chip\n      label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`}\n    />\n  );\n};\n","import Chip from \"@material-ui/core/Chip\";\nimport { withStyles, Theme } from \"@material-ui/core/styles\";\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main\n  },\n  label: {\n    color: theme.palette.primary.main\n  }\n});\nexport default withStyles(cardStyles)(Chip);\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Weather from \"../Features/Weather/Weather\";\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1\n  }\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"Metrics\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} Charts\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: \"100vh\"\n  }\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import {\n  createStyles,\n  FormControl,\n  makeStyles,\n  MenuItem,\n  Select,\n  Theme,\n  Chip,\n  Typography\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControlContainer: {\n      width: \"45%\",\n      justifySelf: \"flex-end\"\n    },\n    formControl: {\n      background: \"#fff\"\n    },\n    chips: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    chip: {\n      margin: 2,\n      zIndex: 5\n    }\n  })\n);\n\nexport type SelectOption = {\n  value: string;\n  isSelected: boolean;\n};\n\ntype SelectProps = {\n  options: string[];\n  selectedOptions: string[];\n  handleChange: (e: any) => void;\n  handleDelete: (metric: string) => (e: any) => void;\n};\nexport default ({\n  options,\n  selectedOptions,\n  handleChange,\n  handleDelete\n}: SelectProps) => {\n  const classes = useStyles();\n  const freeOptions = options.filter(opt => !selectedOptions.includes(opt));\n\n  return (\n    <FormControl variant=\"outlined\" className={classes.formControlContainer}>\n      <Select\n        className={classes.formControl}\n        id=\"demo-simple-select-outlined\"\n        multiple\n        onChange={handleChange}\n        value={selectedOptions}\n        renderValue={selected => (\n          <div className={classes.chips}>\n            {(selected as string[]).map(value => (\n              <Chip\n                key={value}\n                label={value}\n                className={classes.chip}\n                onDelete={handleDelete(value as string)}\n                onMouseDown={event => {\n                  event.stopPropagation();\n                }}\n              />\n            ))}\n          </div>\n        )}\n      >\n        {freeOptions.length === 0 ? (\n          <Typography variant=\"body2\" align=\"center\" gutterBottom>\n            No options.\n          </Typography>\n        ) : (\n          freeOptions.map((opt: string) => (\n            <MenuItem key={opt} value={opt}>\n              {opt}\n            </MenuItem>\n          ))\n        )}\n      </Select>\n    </FormControl>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useQuery } from \"urql\";\nimport Select from \"../../components/Select\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport { IState } from \"../../store\";\nimport { actions } from \"./reducer\";\n\nconst query = `\nquery {\n    getMetrics \n}\n`;\n\nexport const getAvaiableCharts = (state: IState) => {\n  const {\n    metrics,\n    currentSelectedMetric,\n    selectedMetrics,\n    deletedMetric\n  } = state.availableCharts;\n  return {\n    metrics,\n    selectedMetrics,\n    currentSelectedMetric,\n    deletedMetric\n  };\n};\n\nconst AvaiableCharts = () => {\n  const dispatch = useDispatch();\n  const { selectedMetrics, metrics } = useSelector(getAvaiableCharts);\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    dispatch(actions.metricsSelected(event.target.value as string[]));\n  };\n\n  const handleDelete = (metric: string) => (e: any) => {\n    dispatch(actions.metricDeleted(metric));\n  };\n\n  const [result] = useQuery({\n    query\n  });\n  const { fetching, data, error } = result;\n\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.metricsApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n\n    const { getMetrics } = data;\n\n    dispatch(actions.metricsDataReceived(getMetrics));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return (\n    <Select\n      options={metrics}\n      selectedOptions={selectedMetrics}\n      handleChange={handleChange}\n      handleDelete={handleDelete}\n    />\n  );\n};\n\nexport default () => {\n  return <AvaiableCharts />;\n};\n","import React from \"react\";\nimport { Line as LineChart } from \"react-chartjs-2\";\nimport { NewMeasurement } from \"../Features/CurrentMetrics/reducer\";\n\nconst colors = [\n  \"rgba(41, 6, 107, 1)\",\n  \"rgba(175, 75, 206, 1)\",\n  \"rgba(219, 76, 178, 1)\",\n  \"rgba(235, 84, 140, 1)\",\n  \"rgba(234, 115, 105, 1)\",\n  \"rgba(240, 165, 143, 1)\"\n];\n\nconst HistoryChart = ({ data }: { data: any }) => {\n  if (Object.keys(data).length === 0) {\n    return null;\n  }\n  const yAxes: { id: string; type: string; position: string }[] = [];\n  const datalabels = Object.entries(data).map(([key, measurements], i) => {\n    yAxes.push({\n      id: `y-${key}`,\n      type: \"linear\",\n      position: \"left\"\n    });\n\n    return {\n      label: key,\n      type: \"line\",\n      borderWidth: 1,\n      fill: false,\n      data: (measurements as NewMeasurement[]).map(({ at, value }) => ({\n        t: at,\n        y: value\n      })),\n      yAxisID: `y-${key}`,\n      lineTension: 0,\n      borderColor: colors[i],\n      pointHoverRadius: 8,\n      pointHoverBorderWidth: 10,\n      pointRadius: 0\n    };\n  });\n\n  return (\n    <LineChart\n      data={{ datasets: datalabels }}\n      options={{\n        scales: {\n          xAxes: [{ type: \"time\", distribution: \"linear\" }],\n          yAxes\n        }\n      }}\n    />\n  );\n};\n\nexport default HistoryChart;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useQuery } from \"urql\";\nimport HistoryChart from \"../../components/HistoryChart\";\nimport { IState } from \"../../store\";\nimport { getAvaiableCharts } from \"../ChartsMenu/AvailableCharts\";\nimport { actions } from \"./reducer\";\n\nconst query = `\n    query($metricName: String!, $afterTime: Timestamp) {\n        getMultipleMeasurements(input: {\n            metricName: $metricName,\n            after: $afterTime \n          }) {\n            metric,\n            measurements {\n                metric,\n                at, value, unit\n              }\n        }\n    }\n`;\n\nconst calc30minago = Date.now() - 30 * 60 * 1000;\n\nconst getHistoryMetrics = (state: IState) => {\n  return {\n    historyMetrics: state.historyMetrics\n  };\n};\n\nconst HistoryMetrics = () => {\n  const dispatch = useDispatch();\n  const { currentSelectedMetric, deletedMetric } = useSelector(\n    getAvaiableCharts\n  );\n  const { historyMetrics } = useSelector(getHistoryMetrics);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      metricName: currentSelectedMetric,\n      afterTime: calc30minago\n    }\n  });\n  const { data, error } = result;\n\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.historyMetricApiError({ error: error.message }));\n      return;\n    }\n\n    if (!data) return;\n\n    if (deletedMetric !== \"\" && currentSelectedMetric === \"\") {\n      dispatch(actions.historyMetricNotActive(deletedMetric));\n      return;\n    }\n\n    if (!currentSelectedMetric || currentSelectedMetric !== \"\") {\n      const { getMultipleMeasurements } = data;\n      const { measurements } = getMultipleMeasurements[0];\n      if (measurements.length !== 0) {\n        const toDispatch = {\n          key: currentSelectedMetric,\n          measurements\n        };\n        dispatch(actions.historyMetricReceived(toDispatch));\n      }\n    }\n  }, [dispatch, data, currentSelectedMetric, deletedMetric, error]);\n\n  return <HistoryChart data={historyMetrics} />;\n};\n\nexport default HistoryMetrics;\n","import React from \"react\";\nimport {\n  Card,\n  createStyles,\n  Typography,\n  makeStyles,\n  Grid\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(\n  createStyles({\n    card: {\n      maxWidth: \"130px\",\n      padding: \"7px 7px\"\n    },\n    container: {\n      width: \"50%\"\n    }\n  })\n);\n\nconst CurrentMetricCard = ({\n  metric,\n  value\n}: {\n  metric: string;\n  value: number;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <Typography variant=\"body2\" gutterBottom>\n        {metric}\n      </Typography>\n      <Typography variant=\"h6\">{value}</Typography>\n    </Card>\n  );\n};\n\nexport default ({\n  currentMetrics\n}: {\n  currentMetrics: { [key: string]: number };\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      className={classes.container}\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"flex-start\"\n    >\n      {Object.entries(currentMetrics).map(([metric, value], i) => {\n        return (\n          <Grid item xs={3} key={metric + i}>\n            <CurrentMetricCard metric={metric} value={value} />\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useSubscription } from \"urql\";\nimport CurrentMetricsContainer from \"../../components/CurrentMetricsContainer\";\nimport { IState } from \"../../store\";\nimport { getAvaiableCharts } from \"../ChartsMenu/AvailableCharts\";\nimport { actions, NewMeasurement } from \"./reducer\";\n\nconst newMeasurement = `\n  subscription NewMeasurement {\n    newMeasurement {\n        metric\n        at\n        value\n        unit\n    }\n  }\n`;\n\nconst handleSub = (messages: any[] = [], response: any): any => {\n  return response.newMeasurement;\n};\n\nexport const getCurrentMetrics = (state: IState) => {\n  return {\n    currentMetrics: state.currentMetrics\n  };\n};\n\nexport const CurrentMetrics = () => {\n  const dispatch = useDispatch();\n  const [res] = useSubscription({ query: newMeasurement }, handleSub);\n  const { selectedMetrics } = useSelector(getAvaiableCharts);\n  const { currentMetrics } = useSelector(getCurrentMetrics);\n\n  const { data, error } = res;\n\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.currentMeasurementApiError({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n\n    const typedData = (data as any) as NewMeasurement;\n\n    const { metric } = typedData;\n\n    if (selectedMetrics.includes(metric)) {\n      dispatch(actions.newMeasurementReceived(typedData));\n    }\n  }, [dispatch, data, error, selectedMetrics]);\n\n  useEffect(() => {\n    dispatch(actions.metricDeleted(selectedMetrics));\n  }, [selectedMetrics, dispatch]);\n\n  return <CurrentMetricsContainer currentMetrics={currentMetrics} />;\n};\n","import React from \"react\";\nimport createStore from \"./store\";\nimport { ToastContainer } from \"react-toastify\";\nimport {\n  MuiThemeProvider,\n  createMuiTheme,\n  makeStyles,\n  createStyles\n} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport AvaiableCharts from \"./Features/ChartsMenu/AvailableCharts\";\nimport {\n  createClient,\n  Provider as GQLProvider,\n  defaultExchanges,\n  subscriptionExchange\n} from \"urql\";\nimport { Provider } from \"react-redux\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\nimport HistoryMetrics from \"./Features/HistoryMetrics/HistoryMetrics\";\nimport { CurrentMetrics } from \"./Features/CurrentMetrics/CurrentMetrics\";\nimport { Grid } from \"@material-ui/core\";\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"rgb(39,49,66)\"\n    },\n    secondary: {\n      main: \"rgb(197,208,222)\"\n    },\n    background: {\n      default: \"rgb(226,231,238)\"\n    }\n  }\n});\n\nconst subscriptionClient = new SubscriptionClient(\n  \"wss://react.eogresources.com/graphql\",\n  {\n    reconnect: true\n  }\n);\n\nconst client = createClient({\n  url: \"https://react.eogresources.com/graphql\",\n  exchanges: [\n    ...defaultExchanges,\n    subscriptionExchange({\n      forwardSubscription(operation) {\n        return subscriptionClient.request(operation);\n      }\n    })\n  ]\n});\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    workingArea: {\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      padding: \"20px\"\n    },\n    metrics: {\n      width: \"100%\",\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n      marginBottom: \"30px\"\n    }\n  })\n);\nconst App = () => {\n  const classes = useStyles();\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <Wrapper>\n          <GQLProvider value={client}>\n            <Header />\n\n            <div className={classes.workingArea}>\n              <div className={classes.metrics}>\n                <CurrentMetrics />\n                <AvaiableCharts />\n              </div>\n\n              <Grid container spacing={2} direction=\"row\">\n                <Grid item xs={11} justify=\"center\" alignItems=\"center\">\n                  <HistoryMetrics />\n                  <ToastContainer />\n                </Grid>\n\n                <Grid item xs={1}></Grid>\n              </Grid>\n            </div>\n          </GQLProvider>\n        </Wrapper>\n      </Provider>\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}